import styles from "../styles/Home.module.scss";
import { useState, useEffect, Router } from "react";
import { motion } from "framer-motion";
import services from "../utils/services.js";
import Timer from "./timer.js";
import { createBrowserHistory as history } from "history";

export default function Home() {
	const [getSlideUpValue, setSlideUpValue] = useState("650");
	const [getQuizData, setQuizData] = useState();
	const [currentQuestionIndex, setQuestionIndex] = useState(0);
	const [currentPoints, setPoints] = useState(0);

	useEffect(() => {
		async function setDataState() {
			let data = await services.getQuiz();
			setQuizData(Object.entries(data));
		}
		setDataState();
	}, []);

	function answerTheQuestion(e) {
		let answer = e.target.getAttribute("data-Index");
		if (!answer) {
			answer = e.target.parentNode.getAttribute("data-Index");
		}
		if (answer === getQuizData[currentQuestionIndex][1].rightAnswer) {
			setPoints((prev) => {
				return prev + 1;
			});
		}
		setSlideUpValue("0");
		setTimeout(() => {
			setQuestionIndex((prev) => {
				setTimeout(() => {
					setSlideUpValue("650px");
				}, 500);

				if (prev + 1 >= getQuizData.length) {
					window.location.href = `/results/${currentPoints}`;
					return;
				}
				return prev + 1;
			});
		}, 500);
	}

	function handleTimeLeft(e) {
		setQuestionIndex((prev) => {
			if (prev + 1 >= getQuizData.length) {
				window.location.href = `/results/${currentPoints}`;
				return;
			}
			return prev + 1;
		});
	}
	return (
		<div className={styles.wrapper}>
			<header>
				<title>Quiz</title>
				<meta
					name="description"
					content="Generated by create next app"
				/>
				<link rel="icon" href="/favicon.ico" />
				<link
					rel="stylesheet"
					href="https://use.typekit.net/sly1ocm.css"
				/>
				<script src="https://cdn.jsdelivr.net/gh/google/code-prettify@master/loader/run_prettify.js"></script>
			</header>

			<main className={styles.main}>
				<motion.div
					animate={{
						y: -70,
						opacity: 1
					}}
					initial={{ opacity: 0.5, y: 50 }}
					transition={{
						type: "spring",
						stiffness: 170
					}}
					className={styles.quizContainer}>
					<Timer
						onTimeLeft={(e) => handleTimeLeft(e)}
						props={currentQuestionIndex}></Timer>

					<motion.div
						className={styles.innerContainer}
						style={{ maxHeight: getSlideUpValue }}
						animate={{
							y: -15
						}}
						transition={{
							type: "spring",
							stiffness: 100,
							delay: 0
						}}
						initial={{ y: 60 }}>
						<div className={styles.quizTitle}>
							{getQuizData
								? getQuizData[currentQuestionIndex][1].Question
								: ""}
						</div>

						{getQuizData ? (
							getQuizData[currentQuestionIndex][1]
								?.codeQuestion ? (
								<div className={styles.quizQuestionContainer}>
									<pre className="prettyprint">
										<code>
											{
												getQuizData[
													currentQuestionIndex
												][1]?.codeQuestion
											}
										</code>
									</pre>
								</div>
							) : null
						) : null}
						<div className={styles.quizAnswers}>
							{getQuizData
								? Object.entries(
										getQuizData[currentQuestionIndex][1]
											.answers
								  ).map((el) => {
										return (
											<div
												key={el[0]}
												data-Index={el[0]}
												className={styles.answer}
												onClick={(e) =>
													answerTheQuestion(e)
												}>
												<div data-Index={el[0]}>
													<span>{el[0]}</span>
												</div>
												<pre
													data-Index={el[0]}
													className="prettyprint">
													{el[1]}
												</pre>
											</div>
										);
								  })
								: null}
						</div>
					</motion.div>
				</motion.div>
			</main>
		</div>
	);
}
